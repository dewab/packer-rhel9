name: Template Build and Test

on:
  push:
    branches:
      - main
      - master

  release:
    types: [published]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  PRODUCT_VERSION: "latest"
  PKR_VAR_vsphere_server: ${{ secrets.PKR_VAR_vsphere_server }}
  PKR_VAR_vsphere_user: ${{ secrets.PKR_VAR_vsphere_user }}
  PKR_VAR_vsphere_password: ${{ secrets.PKR_VAR_vsphere_password }}
  PKR_VAR_vsphere_cluster: ${{ vars.PKR_VAR_vsphere_cluster }}
  PKR_VAR_vsphere_datacenter: ${{ vars.PKR_VAR_vsphere_datacenter }}
  PKR_VAR_vsphere_datastore: ${{ vars.PKR_VAR_vsphere_datastore }}
  PKR_VAR_vsphere_network: ${{ vars.PKR_VAR_vsphere_network }}
  PKR_VAR_vsphere_folder: ${{ vars.PKR_VAR_vsphere_folder }}
  TF_VAR_vsphere_server: ${{ secrets.PKR_VAR_vsphere_server }}
  TF_VAR_vsphere_user: ${{ secrets.PKR_VAR_vsphere_user }}
  TF_VAR_vsphere_password: ${{ secrets.PKR_VAR_vsphere_password }}
  TF_VAR_vsphere_cluster: ${{ vars.PKR_VAR_vsphere_cluster }}
  TF_VAR_vsphere_datacenter: ${{ vars.PKR_VAR_vsphere_datacenter }}
  TF_VAR_vsphere_datastore: ${{ vars.PKR_VAR_vsphere_datastore }}
  TF_VAR_vsphere_network: ${{ vars.PKR_VAR_vsphere_network }}
  TF_VAR_vsphere_folder: ${{ vars.PKR_VAR_vsphere_folder }}
  TF_VAR_guest_redhat_user: ${{ secrets.REDHAT_USER }}
  TF_VAR_guest_redhat_password: ${{ secrets.REDHAT_PASSWORD }}
  HCP_PROJECT_ID: ${{ secrets.HCP_PROJECT_ID }}
  HCP_ORGANIZATION_ID: ${{ secrets.HCP_ORGANIZATION_ID }}
  HCP_CLIENT_ID: ${{ secrets.HCP_CLIENT_ID }}
  HCP_CLIENT_SECRET: ${{ secrets.HCP_CLIENT_SECRET }}

jobs:
  build:
    runs-on: [self-hosted, Linux, X64]
    name: Build Template
    outputs:
      iteration_id: ${{ steps.hcp.outputs.iteration_id }}    
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup `packer`
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: ${{ env.PRODUCT_VERSION }}

      - name: Run `packer init`
        id: init
        working-directory: ./rhel9
        run: "packer init ."
        
      - name: Run `packer validate`
        id: validate
        working-directory: ./rhel9
        run: "packer validate ."
        
      - name: Builder Artifact
        id: build
        working-directory: ./rhel9
        run: "packer build -color=false -on-error=abort -force ."
        
      - name: Get HCP Packer Iteration ID from Packer Manifest
        id: hcp
        working-directory: ./rhel9
        run: |
          last_run_uuid=$(jq -r '.last_run_uuid' "./packer_manifest.json")
          build=$(jq -r '.builds[] | select(.packer_run_uuid == "'"$last_run_uuid"'")' "./packer_manifest.json")
          iteration_id=$(echo "$build" | jq -r '.custom_data.iteration_id')
          echo "::set-output name=iteration_id::$iteration_id"

  test:
    name: Test Template
    needs: build
    runs-on: [self-hosted, Linux, X64]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      
      - name: Setup `Terraform`
        uses: hashicorp/setup-terraform@v1
        id: setup
        with:
          terraform_wrapper: false
        
      - name: Terraform Init
        id: init
        working-directory: ./test/terraform
        run: terraform init
        
      - name: Terraform Apply
        id: apply
        working-directory: ./test/terraform
        run: |
          terraform apply -auto-approve -var="iteration_id=${{ needs.build.outputs.iteration_id }}"
          health_endpoint=$(terraform output -raw health_endpoint)
          echo "::set-output name=health_endpoint::${health_endpoint}"
        
      - name: Invoke Test
        id: test
        working-directory: ./test/scripts
        run: sh ./e2e_test.sh "${{ steps.apply.outputs.health_endpoint }}"
        
      - name: Clean Up Testing Infrastructure
        id: destroy
        # always run this step even if the previous steps fail
        if: always() 
        working-directory: ./test/terraform
        run: terraform destroy -auto-approve -var="iteration_id=${{ needs.build.outputs.iteration_id }}"
        
  promote-dev-staging:
    name: Promote to Dev and Staging Channels
    needs: ['build', 'test'] # this will automatically be skipped if the test job fails
    runs-on: [self-hosted, Linux, X64]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      
      - name: Promote Iteration to Dev
        working-directory: ./test/scripts
        run: ./set_iteration.sh "redhat" "development" "${{ needs.build.outputs.iteration_id }}"
      
      - name: Promote Iteration to Staging
        working-directory: ./test/scripts
        run: ./set_iteration.sh "redhat" "staging" "${{ needs.build.outputs.iteration_id }}"
