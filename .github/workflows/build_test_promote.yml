name: Template Build and Test

on:
  push:
    branches:
      - main
      - master

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  schedule:
    # Uses UTC instead of local time zone
    # Uess Unix cron syntax
    # * is a special character in YAML so you have to quote this string
    # This cron will run every day at 4pm UTC
    - cron: '0 7 * * *'

env:
  PRODUCT_VERSION: "latest"
  PKR_VAR_vsphere_cluster: ${{ vars.VSPHERE_CLUSTER }}
  PKR_VAR_vsphere_datacenter: ${{ vars.VSPHERE_DATACENTER }}
  PKR_VAR_vsphere_datastore: ${{ vars.VSPHERE_DATASTORE }}
  PKR_VAR_vsphere_network: ${{ vars.VSPHERE_NETWORK }}
  PKR_VAR_vsphere_folder: ${{ vars.VSPHERE_FOLDER }}
  TF_VAR_vsphere_cluster: ${{ vars.VSPHERE_CLUSTER }}
  TF_VAR_vsphere_datacenter: ${{ vars.VSPHERE_DATACENTER }}
  TF_VAR_vsphere_datastore: ${{ vars.VSPHERE_DATASTORE }}
  TF_VAR_vsphere_network: ${{ vars.VSPHERE_NETWORK }}
  TF_VAR_vsphere_folder: ${{ vars.VSPHERE_FOLDER }}
  HCP_BUCKET: ${{ vars.HCP_BUCKET }}

jobs:
  build:
    runs-on: [self-hosted, Linux, X64]
    name: Build Template
    outputs:
      iteration_id: ${{ steps.hcp.outputs.iteration_id }}
    steps:

      - name: Import Secrets
        uses: hashicorp/vault-action@v2.4.0
        with:
          url: ${{ secrets.VAULT_ADDR }}
          token: ${{ secrets.VAULT_TOKEN }}
          caCertificate: ${{ secrets.VAULT_CACERT }}
          secrets: |
            vcenter/vcsa.lab.local username | PKR_VAR_vsphere_user ;
            vcenter/vcsa.lab.local password | PKR_VAR_vsphere_password ;
            vcenter/vcsa.lab.local hostname | PKR_VAR_vsphere_server ;
            guest_defaults/linux/guest username | PKR_VAR_guest_username ;
            guest_defaults/linux/guest password | PKR_VAR_guest_password ;
            guest_defaults/linux/admin username | PKR_VAR_admin_username ;
            guest_defaults/linux/admin password | PKR_VAR_admin_password ;
            redhat/rhn username | PKR_VAR_guest_redhat_user ;
            redhat/rhn password | PKR_VAR_guest_redhat_password ;
            hashicorp-cloud-platform/packer project_id | HCP_PROJECT_ID ;
            hashicorp-cloud-platform/packer organization_id | HCP_ORGANIZATION_ID ;
            hashicorp-cloud-platform/packer client_id | HCP_CLIENT_ID ;
            hashicorp-cloud-platform/packer client_secret | HCP_CLIENT_SECRET ;
            my-azure/personal client_id | ARM_CLIENT_ID ;
            my-azure/personal client_secret | ARM_CLIENT_SECRET ;
            my-azure/personal subscription_id | ARM_SUBSCRIPTION_ID ;
            my-azure/personal tenant_id | ARM_TENANT_ID ;

      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup `packer`
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: ${{ env.PRODUCT_VERSION }}

      - name: Run `packer init`
        id: init
        run: "packer init ."

      - name: Run `packer validate`
        id: validate
        run: "packer validate ."

      - name: Run `packer build`
        id: build
        run: "packer build -color=false -on-error=abort -force ."

      - name: Get HCP Packer Iteration ID from Packer Manifest
        id: hcp
        run: |
          last_run_uuid=$(jq -r '.last_run_uuid' "./packer_manifest.json")
          build=$(jq -r '.builds[] | select(.packer_run_uuid == "'"$last_run_uuid"'")' "./packer_manifest.json")
          iteration_id=$(echo "$build" | jq -r '.custom_data.iteration_id')
          echo "::set-output name=iteration_id::$iteration_id"

  test:
    name: Test Template
    needs: build
    runs-on: [self-hosted, Linux, X64]
    steps:
      - name: Import Secrets
        uses: hashicorp/vault-action@v2.4.0
        with:
          url: ${{ secrets.VAULT_ADDR }}
          token: ${{ secrets.VAULT_TOKEN }}
          caCertificate: ${{ secrets.VAULT_CACERT }}
          secrets: |
            vcenter/vcsa.lab.local username | TF_VAR_vsphere_user ;
            vcenter/vcsa.lab.local password | TF_VAR_vsphere_password ;
            vcenter/vcsa.lab.local hostname | TF_VAR_vsphere_server ;
            guest_defaults/linux/guest username | TF_VAR_guest_username ;
            guest_defaults/linux/guest password | TF_VAR_guest_password ;
            guest_defaults/linux/admin username | TF_VAR_admin_username ;
            guest_defaults/linux/admin password | TF_VAR_admin_password ;
            redhat/rhn username | TF_VAR_guest_redhat_user ;
            redhat/rhn password | TF_VAR_guest_redhat_password ;
            hashicorp-cloud-platform/packer project_id | HCP_PROJECT_ID ;
            hashicorp-cloud-platform/packer organization_id | HCP_ORGANIZATION_ID ;
            hashicorp-cloud-platform/packer client_id | HCP_CLIENT_ID ;
            hashicorp-cloud-platform/packer client_secret | HCP_CLIENT_SECRET ;

      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup `Terraform`
        uses: hashicorp/setup-terraform@v1
        id: setup
        with:
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        working-directory: ./test/terraform
        run: terraform init

      - name: Terraform Apply
        id: apply
        working-directory: ./test/terraform
        run: |
          terraform apply -auto-approve -var="iteration_id=${{ needs.build.outputs.iteration_id }}"
          health_endpoint=$(terraform output -raw health_endpoint)
          echo "::set-output name=health_endpoint::${health_endpoint}"

      - name: Invoke Test
        id: test
        working-directory: ./test/scripts
        run: sh ./e2e_test.sh "${{ steps.apply.outputs.health_endpoint }}"

      - name: Clean Up Testing Infrastructure
        id: destroy
        # always run this step even if the previous steps fail
        if: always()
        working-directory: ./test/terraform
        run: terraform destroy -auto-approve -var="iteration_id=${{ needs.build.outputs.iteration_id }}"

  promote-dev-staging:
    name: Promote to Dev and Staging Channels
    needs: ['build', 'test'] # this will automatically be skipped if the test job fails
    runs-on: [self-hosted, Linux, X64]
    steps:
      - name: Import Secrets
        uses: hashicorp/vault-action@v2.4.0
        with:
          url: ${{ secrets.VAULT_ADDR }}
          token: ${{ secrets.VAULT_TOKEN }}
          caCertificate: ${{ secrets.VAULT_CACERT }}
          secrets: |
            hashicorp-cloud-platform/packer project_id | HCP_PROJECT_ID ;
            hashicorp-cloud-platform/packer organization_id | HCP_ORGANIZATION_ID ;
            hashicorp-cloud-platform/packer client_id | HCP_CLIENT_ID ;
            hashicorp-cloud-platform/packer client_secret | HCP_CLIENT_SECRET ;

      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Promote Iteration to Dev
        working-directory: ./.github/scripts
        run: ./set_iteration.sh "${{ vars.HCP_BUCKET }}" "development" "${{ needs.build.outputs.iteration_id }}"

      - name: Promote Iteration to Staging
        working-directory: ./.github/scripts
        run: ./set_iteration.sh "${{ vars.HCP_BUCKET }}" "staging" "${{ needs.build.outputs.iteration_id }}"
